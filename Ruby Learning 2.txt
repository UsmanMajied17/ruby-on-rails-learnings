Sorting in Ruby


What You'll Be Building
We noticed in the last lesson that .sort! didn’t have a built-in way of handling sorting in reverse alphabetical order. Now that we know how to write our own Ruby methods, we can fix that!

1.
The code in the editor should look familiar—there’s only one new idea (on line 1). When you’re ready, click Run to execute the code and start building your own method.

def alphabetize(arr, rev=false)
  if rev
    arr.sort { |item1, item2| item2 <=> item1 }
  else
    arr.sort { |item1, item2| item1 <=> item2 }
  end
end

books = ["Heart of Darkness", "Code Complete", "The Lorax", "The Prophet", "Absalom, Absalom!"]

puts "A-Z: #{alphabetize(books)}"
puts "Z-A: #{alphabetize(books, true)}"

output : 
A-Z: ["Absalom, Absalom!", "Code Complete", "Heart of Darkness", "The Lorax", "The Prophet"]
Z-A: ["The Prophet", "The Lorax", "Heart of Darkness", "Code Complete", "Absalom, Absalom!"]

_________

Sorting With Control Flow
Great! Now we need to add the right logic to our method.

numbers = [1, 2, 3, 4, 5]
numbers.reverse!
puts numbers
In the example above, we create an array called numbers.
Then, we reverse the array. Like with .sort!, the exclamation mark means we modify the actual array.
Finally, we print out 5, 4, 3, 2, and 1.

->
def alphabetize(arr, rev=false)
  if rev
    return arr.reverse!
  else
  	return arr.sort!
  end
end

numbers = [3,4,22,1,5,3,7]

puts alphabetize(numbers,true)

output : [7, 3, 5, 1, 22, 4, 3]
