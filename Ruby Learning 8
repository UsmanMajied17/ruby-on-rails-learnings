BLOCKS, PROCS, AND LAMBDAS

You Know This!
We learned a bit about blocks in Loops & Iterators and Methods, Blocks, & Sorting. We said earlier that a block is like a nameless method, but that’s not quite true. (We’ll get to actual nameless methods, called lambdas, later in this lesson.)

A Ruby block is just a bit of code that can be executed. Block syntax uses either do..end or curly braces ({}), like so:

[1, 2, 3].each do |num|
  puts num
end
# ==> Prints 1, 2, 3 on separate lines

[1, 2, 3].each { |num| puts num }
# ==> Prints 1, 2, 3 on separate lines
Blocks can be combined with methods like .each and .times to execute an instruction for each element in a collection (like a hash or array).

___________________

Collect 'Em All
Good! There are a bunch of really useful Ruby methods that take blocks. One we haven’t covered yet is collect.

The collect method takes a block and applies the expression in the block to every element in an array. Check it out:

my_nums = [1, 2, 3]
my_nums.collect { |num| num ** 2 }
# ==> [1, 4, 9]
If we look at the value of my_nums, though, we’ll see it hasn’t changed:

my_nums
# ==> [1, 2, 3]
This is because .collect returns a copy of my_nums, but doesn’t change (or mutate) the original my_nums array. If we want to do that, we can use .collect! with an exclamation point:

my_nums.collect! { |num| num ** 2 }
# ==> [1, 4, 9]
my_nums
# ==> [1, 4, 9]
Recall that the ! in Ruby means “this method could do something dangerous or unexpected!” In this case, it mutates the original array instead of creating a new one.

-> 

fibs = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]

# Add your code below!

double = Proc.new {|x| x * 2}

doubled_fibs = fibs.collect(&double)

puts doubled_fibs

output
[2, 2, 4, 6, 10, 16, 26, 42, 68, 110]

________________________________________

Learning to Yield
Why do some methods accept a block and others don’t? It’s because methods that accept blocks have a way of transferring control from the calling method to the block and back again. We can build this into the methods we define by using the yield keyword.

Instructions
Check out the code in the editor. We’ve set up a series of puts statements so you can see when we’re in the block_test method and when we’re in the block passed to it. Click Run to see the result!

def block_test
  puts "We're in the method!"
  puts "Yielding to the block..."
  yield
  puts "We're back in the method!"
end

block_test { puts ">>> We're in the block!" }

output

We're in the method!
Yielding to the block...
>>> We're in the block!
We're back in the method!
____________________________________________


Yielding With Parameters
You can also pass parameters to yield! Check out the example in the editor.

The yield_name method is defined with one parameter, name.
On line 9, we call the yield_name method and supply the argument "Eric" for the name parameter. Since yield_name has a yield statement, we will also need to supply a block.
Inside the method, on line 2, we first puts an introductory statement.
Then we yield to the block and pass in "Kim".
In the block, n is now equal to "Kim" and we puts out “My name is Kim.”
Back in the method, we puts out that we are in between the yields.
Then we yield to the block again. This time, we pass in "Eric" which we stored in the name parameter.
In the block, n is now equal to "Eric" and we puts out “My name is Eric.”
Finally, we puts out a closing statement.
Instructions
1.
Call yield_name with your name as a parameter. Make sure to pass in a block that puts “My name is #{your name here}!”
__

def yield_name(name)
  puts "In the method! Let's yield."
  yield("Kim")
  puts "In between the yields!"
  yield(name)
  puts "Block complete! Back in the method."
end

yield_name("Eric") { |n| puts "My name is #{n}." }

# Now call the method with your name!
yield_name("salman") {|n| puts "My name is #{n}."}

output : 

In the method! Let's yield.
My name is Kim.
In between the yields!
My name is Eric.
Block complete! Back in the method.
In the method! Let's yield.
My name is Kim.
In between the yields!
My name is salman.
Block complete! Back in the method.


---> 

def double(n)
  yield("kim")
  puts "i am in method"
  yield(n*2)
end

double(2) {|x| puts "my name is #{x}"}

output : 

my name is kim
i am in method
my name is 4

____________________________________________________

Keeping Your Code DRY
Remember when we told you that everything is an object in Ruby? Well, we sort of fibbed. Blocks are not objects, and this is one of the very few exceptions to the “everything is an object” rule in Ruby.

Because of this, blocks can’t be saved to variables and don’t have all the powers and abilities of a real object. For that, we’ll need… procs!

You can think of a proc as a “saved” block: just like you can give a bit of code a name and turn it into a method, you can name a block and turn it into a proc. Procs are great for keeping your code DRY, which stands for Don’t Repeat Yourself. With blocks, you have to write your code out each time you need it; with a proc, you write your code once and can use it many times!

multiples_of_3 = Proc.new do |n|
  n % 3 == 0
end

print (1..100).to_a.select(&multiples_of_3)

output : 
[3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90, 93, 96, 99] 

Proc Syntax
Procs are easy to define! You just call Proc.new and pass in the block you want to save. Here’s how we’d create a proc called cube that cubes a number (raises it to the third power):

cube = Proc.new { |x| x ** 3 }
We can then pass the proc to a method that would otherwise take a block, and we don’t have to rewrite the block over and over!

[1, 2, 3].collect!(&cube)
# ==> [1, 8, 27]
[4, 5, 6].map!(&cube)
# ==> [64, 125, 216]
(The .collect! and .map! methods do the exact same thing.)

The & is used to convert the cube proc into a block (since .collect! and .map! normally take a block). We’ll do this any time we pass a proc to a method that expects a block.


->

The .floor method rounds a float (a number with a decimal) down to the nearest integer. Write a proc called round_down that will do this rounding (we’ve added the code to pass it to floats.collect).

floats = [1.2, 3.45, 0.91, 7.727, 11.42, 482.911]
# Write your code below this line!

round_down = Proc.new { |x| x.floor }

# Write your code above this line!
ints = floats.collect(&round_down)
print ints

output : 
[1, 3, 0, 7, 11, 482]

-------


group_1 = [4.1, 5.5, 3.2, 3.3, 6.1, 3.9, 4.7]
group_2 = [7.0, 3.8, 6.2, 6.1, 4.4, 4.9, 3.0]
group_3 = [5.5, 5.1, 3.9, 4.3, 4.9, 3.2, 3.2]

# Complete this as a new Proc
over_4_feet = Proc.new {|x| x>=4}

# Change these three so that they use your new over_4_feet Proc
can_ride_1 = group_1.select(&over_4_feet)
can_ride_2 = group_2.select(&over_4_feet)
can_ride_3 = group_3.select(&over_4_feet)

puts can_ride_1
puts can_ride_2
puts can_ride_3

output: 
[4.1, 5.5, 6.1, 4.7]
[7.0, 6.2, 6.1, 4.4, 4.9]
[5.5, 5.1, 4.3, 4.9]

___________________________________________________

Create Your Own!
Okay! Time to take off the training wheels.

cube = Proc.new { |x| x ** 3 }
[1, 2, 3].map(&cube)
# [1, 8, 27]
You’re going to create your very own method that calls your very own proc! We’ll do this in two steps. Use the example above as a syntax reminder.

Instructions
1.
Create a method, greeter, that takes no arguments and yields to a block.

Create a Proc, phrase, that puts "Hello there!". Pass this to greeter instead of a block. (Don’t forget to pass &phrase instead of just phrase!)

def greeter
  yield()
end
phrase = Proc.new {"Hello there!"}

puts greeter(&phrase)

output : Hello there!
-------------

Call Me Maybe
Nice work! Calling a proc with a method isn’t too tricky. However, there’s an even easier way.

Unlike blocks, we can call procs directly by using Ruby’s .call method. Check it out!

test = Proc.new { # does something }
test.call
# does that something!
Remember: there’s always more than one way to do something in Ruby.

____________________________________________________________________________________

Symbols, Meet Procs
Now that you’re learning some of the more complex parts of the Ruby language, you can combine them to work some truly arcane magicks. For instance, remember when we told you that you could pass a Ruby method name around with a symbol? Well, you can also convert symbols to procs using that handy little &.

Check it out:

strings = ["1", "2", "3"]
nums = strings.map(&:to_i)
# ==> [1, 2, 3]
By mapping &:to_i over every element of strings, we turned each string into an integer!

->

Using the example in the instructions as a guide, use collect or map to create the strings_array from the numbers_array. Each element of strings_array should be the string version of the corresponding element from the numbers_array (that is, it should go ["1", "2", "3"... "10"]).

numbers_array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

strings_array = numbers_array.map(&:to_s)

________________________________________________________________________________________________

The Ruby Lambda
Like procs, lambdas are objects. The similarities don’t stop there: with the exception of a bit of syntax and a few behavioral quirks, lambdas are identical to procs.

Check out the code in the editor. See the lambda bit? Typing

lambda { puts "Hello!" }
Is just about the same as

Proc.new { puts "Hello!" }
In the example to the right, when we pass the lambda to lambda_demo, the method calls the lambda and executes its code.

Instructions
Now that you know how blocks and procs work, you should be able to guess what this lambda will puts to the console. Click Run to confirm your suspicions!

def lambda_demo(a_lambda)
  puts "I'm the method!"
  a_lambda.call
end

lambda_demo(lambda { puts "I'm the lambda!" })

------------------------

def lambda_demo(a_lambda)
  puts "I'm the method!"
  a_lambda.call
end

lambda_demo(lambda { puts "I'm the lambda!" })

output :

I'm the method!
I'm the lambda!

------------------

strings = ["leonardo", "donatello", "raphael", "michaelangelo"]
# Write your code below this line!

symbolize = lambda {|x| x.to_sym}

# Write your code above this line!
symbols = strings.collect(&symbolize)
print symbols

output : 
[:leonardo, :donatello, :raphael, :michaelangelo]

----------------------

Lambdas vs. Procs
If you’re thinking that procs and lambdas look super similar, that’s because they are! There are only two main differences.

First, a lambda checks the number of arguments passed to it, while a proc does not. This means that a lambda will throw an error if you pass it the wrong number of arguments, whereas a proc will ignore unexpected arguments and assign nil to any that are missing.

Second, when a lambda returns, it passes control back to the calling method; when a proc returns, it does so immediately, without going back to the calling method.

To see how this works, take a look at the code in the editor. Our first method calls a proc; the second calls a lambda.


-> 

See how the proc says Batman will win? This is because it returns immediately, without going back to the batman_ironman_proc method.

Our lambda, however, goes back into the method after being called, so the method returns the last code it evaluates: "Iron Man will win!"

def batman_ironman_proc
  victor = Proc.new { return "Batman will win!" }
  victor.call
  "Iron Man will win!"
end

puts batman_ironman_proc

def batman_ironman_lambda
  victor = lambda { return "Batman will win!" }
  victor.call
  "Iron Man will win!"
end

puts batman_ironman_lambda

output :
Batman will win!
Iron Man will win!


----------------------------------

Create a lambda, symbol_filter, that takes one parameter and checks to see if that parameter .is_a? Symbol.

Create a new variable called symbols, and store the result of calling my_array.select and passing it your lambda.

puts symbols at the end of the file in order to see the final contents of the array.

---
my_array = ["raindrops", :kettles, "whiskers", :mittens, :packages]

# Add your code below!
symbol_filter = lambda {|x| x.is_a? Symbol}

symbols = my_array.select(&symbol_filter)

puts symbols

output:
[:kettles, :mittens, :packages]
------------

odds_n_ends = [:weezard, 42, "Trady Blix", 3, true, 19, 12.345]

filter = lambda {|x| x.is_a? Integer}

ints = odds_n_ends.select(&filter)

puts ints

output:
[42, 3, 19]

--------------


ages = [23, 101, 7, 104, 11, 94, 100, 121, 101, 70, 44]

# Add your code below!
under_100 = Proc.new{|x| x<100}

youngsters = ages.select(&under_100)

puts youngsters

output: 
[23, 7, 11, 94, 70, 44]

---------------

crew = {
  captain: "Picard",
  first_officer: "Riker",
  lt_cdr: "Data",
  lt: "Worf",
  ensign: "Ro",
  counselor: "Troi",
  chief_engineer: "LaForge",
  doctor: "Crusher"
}
# Add your code below!
first_half = lambda { |x,y| y<"M"}

a_to_m = crew.select(&first_half)

puts a_to_m

output:

{:lt_cdr=>"Data", :chief_engineer=>"LaForge", :doctor=>"Crusher"}
__________________________________________________________________________________________________________________________________


Quick Review
All this talk of blocks, procs, and lambdas might have your head spinning. Let’s take a minute to clarify exactly what each one is:

A block is just a bit of code between do..end or {}. It’s not an object on its own, but it can be passed to methods like .each or .select.
A proc is a saved block we can use over and over.
A lambda is just like a proc, only it cares about the number of arguments it gets and it returns to its calling method rather than returning immediately.
There are obviously lots of cases in which blocks, procs, and lambdas can do similar work, but the exact circumstances of your program will help you decide which one you want to use.






















